@{/* Your component .razor */}
@using Toolbelt.Blazor.SpeechSynthesis; @{/* Add these tow lines. */}
@inject SpeechSynthesis SpeechSynthesis

<p>
    Voice:
    <select @bind="@CurrentVoiceURI">
        <option value="(unset)">(unset)</option>
        @foreach (var voice in Voices)
        {
            <option @key="@voice.VoiceURI" value="@voice.VoiceURI">@voice.Name</option>
        }
    </select>
</p>

<p>
    Text:
    <textarea bind="@Text"></textarea>
</p>
<p>
    Language (BCP47): <input type="text" bind="@Lang" />
</p>

<div>
    <div>Picth: @Pitch.ToString("0.0") <input type="range" min="0.0" max="2.0" step="0.1" bind="@Pitch" /> <button @onclick="@(() => this.Pitch = 1.0)">reset</button></div>
    <div>Rate: @Rate.ToString("0.0") <input type="range" min="0.1" max="10.0" step="0.1" bind="@Rate" /> <button @onclick="@(() => this.Rate = 1.0)">reset</button></div>
    <div>Volume: @Volume.ToString("0.0") <input type="range" min="0.0" max="1.0" step="0.1" bind="@Volume" /> <button @onclick="@(() => this.Volume = 1.0)">reset</button></div>
</div>

<p>
    <button @onclick="@onClickSpeakButton">Speak</button>
    <button @onclick="@onClickSpeakByCachedButton">Speak by Cached</button>
    <button @onclick="@onClickPauseButton">Pause</button>
    <button @onclick="@onClickResumeButton">Resume</button>
    <button @onclick="@onClickCancelButton">Cancel</button>
    <button @onclick="@onClickGC">GC</button>
    <button @onclick="@onClickClearLog">Clear Log</button>
</p>

<div>
    <ul>
        <li>Available ... @SpeechSynthesis.Available</li>
        <li>Speaking ... @SpeechSynthesis.Speaking</li>
        <li>Pending ... @SpeechSynthesis.Pending</li>
        <li>Paused ... @SpeechSynthesis.Paused</li>
    </ul>
</div>

<div>
    @foreach (var log in Logs)
    {
        <div>@log</div>
    }
</div>


@code
{
    string Text = "Hello World.";
    string Lang = "";
    double Pitch = 1.0;
    double Rate = 1.0;
    double Volume = 1.0;

    SpeechSynthesisUtterance CachedUtterancet = new SpeechSynthesisUtterance();

    List<string> Logs = new List<string>();

    IEnumerable<SpeechSynthesisVoice> Voices = new SpeechSynthesisVoice[0];

    SpeechSynthesisVoice CurrentVoice;

    public string CurrentVoiceURI
    {
        get { return this.CurrentVoice?.VoiceURI ?? "(unset)"; }
        set { this.CurrentVoice = this.Voices.FirstOrDefault(v => v.VoiceURI == value); }
    }

    protected async override Task OnInitAsync()
    {
        HandleEvents(this.CachedUtterancet);
        this.Voices = await this.SpeechSynthesis.GetVoicesAsync();
    }

    void onClickSpeakButton()
    {
        var utterancet = new SpeechSynthesisUtterance();
        HandleEvents(utterancet);
        SetupUtterancet(utterancet);
        this.SpeechSynthesis.Speak(utterancet);
    }

    void onClickSpeakByCachedButton()
    {
        SetupUtterancet(this.CachedUtterancet);
        this.SpeechSynthesis.Speak(this.CachedUtterancet);
    }

    void SetupUtterancet(SpeechSynthesisUtterance utterancet)
    {
        utterancet.Text = this.Text;
        utterancet.Lang = this.Lang;
        utterancet.Pitch = this.Pitch;
        utterancet.Rate = this.Rate;
        utterancet.Volume = this.Volume;
        utterancet.Voice = this.CurrentVoice;
    }

    void HandleEvents(SpeechSynthesisUtterance utterancet)
    {
        utterancet.Start += OnStart;
        utterancet.Boundary += OnBoundary;
        utterancet.Mark += OnMark;
        utterancet.Pause += OnPause;
        utterancet.Resume += OnResume;
        utterancet.End += OnEnd;
        utterancet.Error += OnError;
    }

    void onClickPauseButton()
    {
        this.WriteLog("onClickPauseButton");
        Console.WriteLine($"Speaking is [{this.SpeechSynthesis.Speaking}]");
        if (this.SpeechSynthesis.Speaking)
        {
            this.SpeechSynthesis.Pause();
        }
    }

    void onClickResumeButton()
    {
        this.WriteLog("onClickResumeButton");
        Console.WriteLine($"Paused is [{this.SpeechSynthesis.Paused}]");
        if (this.SpeechSynthesis.Paused)
        {
            this.SpeechSynthesis.Resume();
        }
    }

    void onClickCancelButton()
    {
        this.SpeechSynthesis.Cancel();
    }

    void onClickGC()
    {
        GC.Collect();
        this.WriteLog("GC");
    }

    void onClickClearLog()
    {
        this.Logs.Clear();
        this.StateHasChanged();
    }

    void OnStart(object sender, EventArgs args) { this.WriteLog("ON START!"); }
    void OnBoundary(object sender, EventArgs args) { this.WriteLog("ON BOUNDARY!"); }
    void OnMark(object sender, EventArgs args) { this.WriteLog("ON MARK!"); }
    void OnPause(object sender, EventArgs args) { this.WriteLog("ON PAUSE!"); }
    void OnResume(object sender, EventArgs args) { this.WriteLog("ON RESUME!"); }
    void OnEnd(object sender, EventArgs args) { this.WriteLog("ON END!"); }
    void OnError(object sender, EventArgs args) { this.WriteLog("ON ERROR!"); }

    void WriteLog(string text)
    {
        this.Logs = new[] { $"{DateTime.Now:HH:mm:ss.fff} - {text}" }.Concat(this.Logs).Take(20).ToList();
        StateHasChanged();
    }
}