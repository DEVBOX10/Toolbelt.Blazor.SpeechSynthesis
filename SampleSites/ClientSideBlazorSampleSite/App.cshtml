@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis;

<p>
    <ul>
        <li>Available ... @SpeechSynthesis.Available</li>
        <li>Speaking ... @SpeechSynthesis.Speaking</li>
        <li>Pending ... @SpeechSynthesis.Pending</li>
        <li>Paused ... @SpeechSynthesis.Paused</li>
    </ul>
</p>

<p>
    <select bind="@CurrentVoiceURI">
        @foreach (var voice in Voices)
        {
            <option value="@voice.VoiceURI">@voice.Name (@voice.VoiceURI)</option>
        }
    </select>
</p>

<p>
    <textarea bind="@Text"></textarea>
</p>
<p>
    <button onclick="@onClickSpeakButton">Speak</button>
    <button onclick="@onClickSpeakByCachedButton">Speak by Cached</button>
    <button onclick="@onClickPauseButton">Pause</button>
    <button onclick="@onClickResumeButton">Resume</button>
    <button onclick="@onClickCancelButton">Cancel</button>
    <button onclick="@onClickGC">GC</button>
    <button onclick="@onClickClearLog">Clear Log</button>
</p>

<div>
    @foreach (var log in Logs)
    {
        <div>@log</div>
    }
</div>


@functions 
{
    string Text = "Hello World.";

    SpeechSynthesisUtterance CachedUtterancet = new SpeechSynthesisUtterance();

    List<string> Logs = new List<string>();

    IEnumerable<SpeechSynthesisVoice> Voices = new SpeechSynthesisVoice[0];

    SpeechSynthesisVoice CurrentVoice;

    public string CurrentVoiceURI {
        get { return this.CurrentVoice?.VoiceURI; }
        set { this.CurrentVoice = this.Voices.FirstOrDefault(v => v.VoiceURI == value); }
    }

    protected async override Task OnInitAsync()
    {
        this.Voices = await this.SpeechSynthesis.GetVoicesAsync();
        this.CurrentVoice = this.Voices.FirstOrDefault(v => v.Default);
    }

    void onClickSpeakButton() {
        //this.SpeechSynthesis.Speak(this.Text);

        var utterancet = new SpeechSynthesisUtterance();
        SetupUtterancet(utterancet);
        this.SpeechSynthesis.Speak(utterancet);
    }

    void onClickSpeakByCachedButton() {
        SetupUtterancet(this.CachedUtterancet);
        this.SpeechSynthesis.Speak(this.CachedUtterancet);
    }

    void SetupUtterancet(SpeechSynthesisUtterance utterancet)
    {
        //utterancet.Lang = "ja-JP";
        utterancet.Text = this.Text;
        utterancet.Pitch = 1.0;
        utterancet.Rate = 0.5;
        utterancet.Volume = 1;
        utterancet.Voice = this.CurrentVoice;

        utterancet.Start += OnStart;
        utterancet.Boundary += OnBoundary;
        utterancet.Mark += OnMark;
        utterancet.Pause += OnPause;
        utterancet.Resume += OnResume;
        utterancet.End += OnEnd;
        utterancet.Error += OnError;
    }

    void onClickPauseButton()
    {
        Console.WriteLine("onClickPauseButton");
        Console.WriteLine($"Speaking is [{this.SpeechSynthesis.Speaking}]");
        if (this.SpeechSynthesis.Speaking) {
            this.SpeechSynthesis.Pause();
        }
    }

    void onClickResumeButton()
    {
        Console.WriteLine("onClickResumeButton");
        Console.WriteLine($"Paused is [{this.SpeechSynthesis.Paused}]");
        if (this.SpeechSynthesis.Paused)
        {
            this.SpeechSynthesis.Resume();
        }
    }

    void onClickCancelButton()
    {
        this.SpeechSynthesis.Cancel();
    }

    void onClickGC()
    {
        GC.Collect();
        this.WriteLog("GC");
    }

    void onClickClearLog()
    {
        this.Logs.Clear();
        this.StateHasChanged();
    }

    void OnStart(object sender, EventArgs args) { Console.WriteLine("ON START!"); StateHasChanged(); }
    void OnBoundary(object sender, EventArgs args) { Console.WriteLine("ON BOUNDARY!"); StateHasChanged(); }
    void OnMark(object sender, EventArgs args) { Console.WriteLine("ON MARK!"); StateHasChanged(); }
    void OnPause(object sender, EventArgs args) { Console.WriteLine("ON PAUSE!"); StateHasChanged(); }
    void OnResume(object sender, EventArgs args) { Console.WriteLine("ON RESUME!"); StateHasChanged(); }
    void OnEnd(object sender, EventArgs args) { Console.WriteLine("ON END!"); StateHasChanged(); }
    void OnError(object sender, EventArgs args) { Console.WriteLine("ON ERROR!"); StateHasChanged(); }

    void WriteLog(string text)
    {
        this.Logs = new[] { $"{DateTime.UtcNow:HH:mm:ss} - {text}" }.Concat(this.Logs).Take(20).ToList();
        StateHasChanged();
    }
}